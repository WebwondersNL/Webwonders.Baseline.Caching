name: Publish Release

on:
  release:
    types: [published]
    
jobs:
  publish:
    runs-on: ubuntu-latest
    environment: nuget-prod
    permissions: { contents: read }
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4
        with: 
          ref: ${{ github.ref }}
          fetch-depth: 0

      - uses: actions/setup-dotnet@v4
        with: 
          dotnet-version: '9.0.x'

      - name: Find project file
        id: project
        run: |
          PROJECT=$(find . -type f -name "*.csproj" | head -n 1)
          echo "path=$PROJECT" >> "$GITHUB_OUTPUT"
          echo "Detected project: $PROJECT"

      - name: Compute NuGet version from tag & release type
        id: ver
        shell: bash
        env:
          IS_PRERELEASE: ${{ github.event.release.prerelease }}
          RUN: ${{ github.run_number }}
        run: |
          # Tag -> base semver
            t="${GITHUB_REF#refs/tags/}"
            v="${t#v}"  # strip leading v if present
            
            # Validate basic SemVer (with optional pre-release)
            if [[ ! "$v" =~ ^[0-9]+(\.[0-9]+){1,2}(-[0-9A-Za-z.-]+)?$ ]]; then
              echo "Tag '$t' is not SemVer (e.g., v1.2.3 or v1.2.3-beta.1)"; exit 1
            fi
            
            # If tag already has prerelease (contains '-'), use it as-is.
            if [[ "$v" == *-* ]]; then
              nuget_version="$v"
            else
              # No prerelease in tag. If this GitHub Release is marked pre-release, append a suffix.
              if [[ "$IS_PRERELEASE" == "true" ]]; then
                # Change 'beta' to 'preview' or whatever you prefer:
                nuget_version="${v}-beta.${RUN}"
              else
                nuget_version="$v"
              fi
            fi 
          echo "value=$nuget_version" >> "$GITHUB_OUTPUT"
          echo "Computed NuGet version: $nuget_version"

      - name: Enforce allowed base branches (main or release/*)
        shell: bash
        run: |
          branches=$(git branch -r --contains "$GITHUB_SHA" | sed 's#origin/##' | xargs)
          echo "Tag is on branches: $branches"
          echo "$branches" | grep -E '\b(main|release/[0-9]+\.x)\b' >/dev/null || { echo "Tag not on main or release/*"; exit 1; }

      - name: Restore / Build / Pack
        run: |
          dotnet restore "${{ steps.project.outputs.path }}"
          dotnet build   "${{ steps.project.outputs.path }}" -c Release --no-restore
          dotnet pack    "${{ steps.project.outputs.path }}" -c Release -o ./artifacts --no-build \
            /p:ContinuousIntegrationBuild=true \
            /p:Version=${{ steps.ver.outputs.value }} \
            /p:IncludeSymbols=true /p:SymbolPackageFormat=snupkg

      - name: Push to NuGet.org
        run: |
          dotnet nuget push "./artifacts/*.nupkg" --api-key "${{ secrets.NUGET_API_KEY }}" --source "https://api.nuget.org/v3/index.json" --skip-duplicate
          dotnet nuget push "./artifacts/*.snupkg" --api-key "${{ secrets.NUGET_API_KEY }}" --source "https://api.nuget.org/v3/index.json" --skip-duplicate